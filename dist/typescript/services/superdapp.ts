/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.27.1
 * source: services/superdapp.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace superdapp {
    export enum ErcType {
        ERC_20 = 0,
        ERC_721 = 1,
        ERC_1155 = 2
    }
    export enum Actions {
        SEND = 0,
        RECEIVE = 1,
        MINT = 2,
        BURN = 3,
        VOTE = 4,
        DELEGATE = 5,
        COLLECT = 6,
        APPROVE = 7,
        REVOKE = 8,
        SWAP = 9,
        BORROW = 10,
        REPAY = 11,
        DEPOSIT_STAKE = 12,
        PAUSE_STAKE = 13,
        WITHDRAW_STAKE = 14,
        DEPOSIT_LOAN = 15,
        PAUSE_LOAN = 16,
        WITHDRAW_LOAN = 17,
        DEPOSIT_LIQUIDITY = 18,
        PAUSE_LIQUIDITY = 19,
        WITHDRAW_LIQUIDITY = 20,
        DEPOSIT_FARM = 21,
        PAUSE_FARM = 22,
        WITHDRAW_FARM = 23
    }
    export class GetTokenBundlesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            evm_public_keys?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("evm_public_keys" in data && data.evm_public_keys != undefined) {
                    this.evm_public_keys = data.evm_public_keys;
                }
            }
        }
        get evm_public_keys() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set evm_public_keys(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            evm_public_keys?: string[];
        }): GetTokenBundlesRequest {
            const message = new GetTokenBundlesRequest({});
            if (data.evm_public_keys != null) {
                message.evm_public_keys = data.evm_public_keys;
            }
            return message;
        }
        toObject() {
            const data: {
                evm_public_keys?: string[];
            } = {};
            if (this.evm_public_keys != null) {
                data.evm_public_keys = this.evm_public_keys;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.evm_public_keys.length)
                writer.writeRepeatedString(1, this.evm_public_keys);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTokenBundlesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTokenBundlesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTokenBundlesRequest {
            return GetTokenBundlesRequest.deserialize(bytes);
        }
    }
    export class TokenBundleResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token_bundles?: TokenBundle[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token_bundles" in data && data.token_bundles != undefined) {
                    this.token_bundles = data.token_bundles;
                }
            }
        }
        get token_bundles() {
            return pb_1.Message.getRepeatedWrapperField(this, TokenBundle, 1) as TokenBundle[];
        }
        set token_bundles(value: TokenBundle[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            token_bundles?: ReturnType<typeof TokenBundle.prototype.toObject>[];
        }): TokenBundleResponse {
            const message = new TokenBundleResponse({});
            if (data.token_bundles != null) {
                message.token_bundles = data.token_bundles.map(item => TokenBundle.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                token_bundles?: ReturnType<typeof TokenBundle.prototype.toObject>[];
            } = {};
            if (this.token_bundles != null) {
                data.token_bundles = this.token_bundles.map((item: TokenBundle) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token_bundles.length)
                writer.writeRepeatedMessage(1, this.token_bundles, (item: TokenBundle) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TokenBundleResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TokenBundleResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.token_bundles, () => pb_1.Message.addToRepeatedWrapperField(message, 1, TokenBundle.deserialize(reader), TokenBundle));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TokenBundleResponse {
            return TokenBundleResponse.deserialize(bytes);
        }
    }
    export class Token extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            erc?: ErcType;
            address?: string;
            chain_id?: number;
            name?: string;
            symbol?: string;
            decimals?: number;
            actions?: Actions[];
            balance?: Balance;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("erc" in data && data.erc != undefined) {
                    this.erc = data.erc;
                }
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("chain_id" in data && data.chain_id != undefined) {
                    this.chain_id = data.chain_id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("symbol" in data && data.symbol != undefined) {
                    this.symbol = data.symbol;
                }
                if ("decimals" in data && data.decimals != undefined) {
                    this.decimals = data.decimals;
                }
                if ("actions" in data && data.actions != undefined) {
                    this.actions = data.actions;
                }
                if ("balance" in data && data.balance != undefined) {
                    this.balance = data.balance;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get erc() {
            return pb_1.Message.getFieldWithDefault(this, 2, ErcType.ERC_20) as ErcType;
        }
        set erc(value: ErcType) {
            pb_1.Message.setField(this, 2, value);
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get chain_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set chain_id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get symbol() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set symbol(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get decimals() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set decimals(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get actions() {
            return pb_1.Message.getFieldWithDefault(this, 8, []) as Actions[];
        }
        set actions(value: Actions[]) {
            pb_1.Message.setField(this, 8, value);
        }
        get balance() {
            return pb_1.Message.getWrapperField(this, Balance, 9) as Balance;
        }
        set balance(value: Balance) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get has_balance() {
            return pb_1.Message.getField(this, 9) != null;
        }
        static fromObject(data: {
            id?: string;
            erc?: ErcType;
            address?: string;
            chain_id?: number;
            name?: string;
            symbol?: string;
            decimals?: number;
            actions?: Actions[];
            balance?: ReturnType<typeof Balance.prototype.toObject>;
        }): Token {
            const message = new Token({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.erc != null) {
                message.erc = data.erc;
            }
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.chain_id != null) {
                message.chain_id = data.chain_id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.symbol != null) {
                message.symbol = data.symbol;
            }
            if (data.decimals != null) {
                message.decimals = data.decimals;
            }
            if (data.actions != null) {
                message.actions = data.actions;
            }
            if (data.balance != null) {
                message.balance = Balance.fromObject(data.balance);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                erc?: ErcType;
                address?: string;
                chain_id?: number;
                name?: string;
                symbol?: string;
                decimals?: number;
                actions?: Actions[];
                balance?: ReturnType<typeof Balance.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.erc != null) {
                data.erc = this.erc;
            }
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.chain_id != null) {
                data.chain_id = this.chain_id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.symbol != null) {
                data.symbol = this.symbol;
            }
            if (this.decimals != null) {
                data.decimals = this.decimals;
            }
            if (this.actions != null) {
                data.actions = this.actions;
            }
            if (this.balance != null) {
                data.balance = this.balance.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.erc != ErcType.ERC_20)
                writer.writeEnum(2, this.erc);
            if (this.address.length)
                writer.writeString(3, this.address);
            if (this.chain_id != 0)
                writer.writeInt32(4, this.chain_id);
            if (this.name.length)
                writer.writeString(5, this.name);
            if (this.symbol.length)
                writer.writeString(6, this.symbol);
            if (this.decimals != 0)
                writer.writeInt32(7, this.decimals);
            if (this.actions.length)
                writer.writePackedEnum(8, this.actions);
            if (this.has_balance)
                writer.writeMessage(9, this.balance, () => this.balance.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Token {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Token();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.erc = reader.readEnum();
                        break;
                    case 3:
                        message.address = reader.readString();
                        break;
                    case 4:
                        message.chain_id = reader.readInt32();
                        break;
                    case 5:
                        message.name = reader.readString();
                        break;
                    case 6:
                        message.symbol = reader.readString();
                        break;
                    case 7:
                        message.decimals = reader.readInt32();
                        break;
                    case 8:
                        message.actions = reader.readPackedEnum();
                        break;
                    case 9:
                        reader.readMessage(message.balance, () => message.balance = Balance.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Token {
            return Token.deserialize(bytes);
        }
    }
    export class Balance extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            value?: number;
            fiat?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
                if ("fiat" in data && data.fiat != undefined) {
                    this.fiat = data.fiat;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set value(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get fiat() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set fiat(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            id?: string;
            value?: number;
            fiat?: number;
        }): Balance {
            const message = new Balance({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            if (data.fiat != null) {
                message.fiat = data.fiat;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                value?: number;
                fiat?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            if (this.fiat != null) {
                data.fiat = this.fiat;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.value != 0)
                writer.writeDouble(2, this.value);
            if (this.fiat != 0)
                writer.writeDouble(3, this.fiat);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Balance {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Balance();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.value = reader.readDouble();
                        break;
                    case 3:
                        message.fiat = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Balance {
            return Balance.deserialize(bytes);
        }
    }
    export class TokenBundle extends pb_1.Message {
        #one_of_decls: number[][] = [[2]];
        constructor(data?: any[] | ({
            id?: string;
            in?: Token[];
            out?: Token[];
            actions?: Actions[];
            balance?: Balance;
        } & (({
            title?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4, 5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("in" in data && data.in != undefined) {
                    this.in = data.in;
                }
                if ("out" in data && data.out != undefined) {
                    this.out = data.out;
                }
                if ("actions" in data && data.actions != undefined) {
                    this.actions = data.actions;
                }
                if ("balance" in data && data.balance != undefined) {
                    this.balance = data.balance;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_title() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get in() {
            return pb_1.Message.getRepeatedWrapperField(this, Token, 3) as Token[];
        }
        set in(value: Token[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get out() {
            return pb_1.Message.getRepeatedWrapperField(this, Token, 4) as Token[];
        }
        set out(value: Token[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get actions() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as Actions[];
        }
        set actions(value: Actions[]) {
            pb_1.Message.setField(this, 5, value);
        }
        get balance() {
            return pb_1.Message.getWrapperField(this, Balance, 6) as Balance;
        }
        set balance(value: Balance) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_balance() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get _title() {
            const cases: {
                [index: number]: "none" | "title";
            } = {
                0: "none",
                2: "title"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            id?: string;
            title?: string;
            in?: ReturnType<typeof Token.prototype.toObject>[];
            out?: ReturnType<typeof Token.prototype.toObject>[];
            actions?: Actions[];
            balance?: ReturnType<typeof Balance.prototype.toObject>;
        }): TokenBundle {
            const message = new TokenBundle({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.in != null) {
                message.in = data.in.map(item => Token.fromObject(item));
            }
            if (data.out != null) {
                message.out = data.out.map(item => Token.fromObject(item));
            }
            if (data.actions != null) {
                message.actions = data.actions;
            }
            if (data.balance != null) {
                message.balance = Balance.fromObject(data.balance);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                title?: string;
                in?: ReturnType<typeof Token.prototype.toObject>[];
                out?: ReturnType<typeof Token.prototype.toObject>[];
                actions?: Actions[];
                balance?: ReturnType<typeof Balance.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.in != null) {
                data.in = this.in.map((item: Token) => item.toObject());
            }
            if (this.out != null) {
                data.out = this.out.map((item: Token) => item.toObject());
            }
            if (this.actions != null) {
                data.actions = this.actions;
            }
            if (this.balance != null) {
                data.balance = this.balance.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.has_title)
                writer.writeString(2, this.title);
            if (this.in.length)
                writer.writeRepeatedMessage(3, this.in, (item: Token) => item.serialize(writer));
            if (this.out.length)
                writer.writeRepeatedMessage(4, this.out, (item: Token) => item.serialize(writer));
            if (this.actions.length)
                writer.writePackedEnum(5, this.actions);
            if (this.has_balance)
                writer.writeMessage(6, this.balance, () => this.balance.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TokenBundle {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TokenBundle();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.title = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.in, () => pb_1.Message.addToRepeatedWrapperField(message, 3, Token.deserialize(reader), Token));
                        break;
                    case 4:
                        reader.readMessage(message.out, () => pb_1.Message.addToRepeatedWrapperField(message, 4, Token.deserialize(reader), Token));
                        break;
                    case 5:
                        message.actions = reader.readPackedEnum();
                        break;
                    case 6:
                        reader.readMessage(message.balance, () => message.balance = Balance.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TokenBundle {
            return TokenBundle.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedPitBossService {
        static definition = {
            GetTokenBundles: {
                path: "/superdapp.PitBoss/GetTokenBundles",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: GetTokenBundlesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetTokenBundlesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TokenBundleResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TokenBundleResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetTokenBundles(call: grpc_1.ServerWritableStream<GetTokenBundlesRequest, TokenBundleResponse>): void;
    }
    export class PitBossClient extends grpc_1.makeGenericClientConstructor(UnimplementedPitBossService.definition, "PitBoss", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetTokenBundles: GrpcStreamServiceInterface<GetTokenBundlesRequest, TokenBundleResponse> = (message: GetTokenBundlesRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<TokenBundleResponse> => {
            return super.GetTokenBundles(message, metadata, options);
        };
    }
}
